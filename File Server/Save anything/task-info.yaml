type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import server.Request;
    import server.Response;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;
    import java.net.UnknownHostException;

    import static client.ConsoleReader.*;
    import static server.ConsoleWriter.*;


    public class Client {

        public void runClient(String ADDRESS, int PORT){
            try(Socket socket = new Socket(ADDRESS, PORT)){

                DataInputStream input = new DataInputStream(socket.getInputStream());
                DataOutputStream output = new DataOutputStream(socket.getOutputStream());

                prompt();
                Request requestType = getRequest();
                String request = formRequest(requestType);

                output.writeUTF(request);

                String response = input.readUTF();
                processResponse(response, requestType);

            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void processResponse(String response, Request requestType){
            String[] strings = response.split(" ");
            Response responseName = Response.ofValue((strings[0]));

            switch (responseName){
                case SUCCESS: {
                    switch (requestType){
                        case PUT: creationSuccess();
                        break;
                        case DELETE: deletionSuccess();
                        break;
                        case GET: printContent(strings[1]);
                        break;
                    }
                }
                break;
                case FORBIDDEN:
                    creationFail();
                    break;
                case NOT_EXIST:
                    notFound();
                    break;
            }
        }


        public String formRequest(Request requestType){

            String result = "";

            switch (requestType){
                case PUT: {
                    chooseFile();
                    String filename = "";
                    while (filename.isEmpty()) {
                        filename= readString();
                    }
                    enterContent();
                    String content = null;
                    while(content == null){
                        content = readString();
                    }
                    result = requestType.name() + " " + filename + " " + content;
              }
              break;
                case GET:
                case DELETE: {
                    chooseFile();
                    String filename = readString();
                    result = requestType.name() + " " + filename;
                }
                break;
                case EXIT: result = requestType.name();
                break;
            }
            sentRequest();
            return result;
        }
    }
  learner_created: true
- name: src/client/Main.java
  visible: true
  text: |
    package client;



    public class Main {
        private static final String ADDRESS= "127.0.0.1";
        private static final int PORT = 34522;

        public static void main(String[] args) {
            Client client = new Client();
            client.runClient(ADDRESS, PORT);

        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class Server {
        private FileManager manager = new FileManager();

        public void runServer(int PORT) {
            try (ServerSocket server = new ServerSocket(PORT)) {
                ConsoleWriter.printMessage("Server started!");
                while (true) {
                    try (Socket socket = server.accept();
                         DataInputStream input = new DataInputStream(socket.getInputStream());
                         DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {
                        String message = input.readUTF();

                        String response = manager.processRequest(message);

                        if (response.isEmpty()) {
                            break;
                        } else output.writeUTF(response);
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/FileManager.java
  visible: true
  text: |
    package server;


    import java.io.BufferedWriter;
    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;


    public class FileManager {
       private final String fileStorage;

        public FileManager() {
         // fileStorage = "E://Программирование/File Server/File Server/task/src/server/data";
           fileStorage = System.getProperty("user.dir") +
                        File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;
        }

          private void exit(){
            System.exit(0);
        }


        private String add(String filename, String content){
            Path path = Paths.get(fileStorage + "//" + filename);
            System.out.println(path.toString());
            try {
                Path newfile = Files.createFile(path);
                BufferedWriter writer = Files.newBufferedWriter(newfile);
                writer.write(content);
                writer.close();
                return Response.SUCCESS.toString();
            } catch (IOException e) {
                return Response.FORBIDDEN.toString();
            }
        }

        private String delete(String filename){
            Path path = Paths.get(fileStorage + "//" + filename);
            try {
                boolean success = Files.deleteIfExists(path);
                if(success) return Response.SUCCESS.toString();
                return Response.NOT_EXIST.toString();
            } catch (IOException e) {
               return Response.NOT_EXIST.toString();
            }
        }

        private String get(String filename){
            Path path = Paths.get(fileStorage + "//" + filename);
            StringBuilder sb = new StringBuilder();
            try {
                Files.readAllLines(path).forEach(sb::append);
                return Response.SUCCESS.toString() + " " + sb;
            } catch (IOException e) {
                return Response.NOT_EXIST.toString();
            }
        }


        public String processRequest(String request){
            String[] strings = request.split(" ");
            Request requestName = Request.valueOf(strings[0]);
            String response = "";

            switch (requestName){
                case EXIT: exit();
                break;
                case PUT: {
                    String filename = strings[1];
                    String content = strings[2];
                    response = add(filename, content);
                }
                break;
                case GET: {
                    String filename = strings[1];
                    response = get(filename);
                }
                break;
                case DELETE:{
                    String filename = strings[1];
                    response = delete(filename);
                }
                break;
            }
            return response;
        }
    }
  learner_created: true
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName)));
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/utils/RequestType.java
  visible: true
  text: |
    package server;

    public enum Request {
        PUT,
        GET,
        DELETE,
        EXIT
    }
  learner_created: true
- name: src/utils/Request.java
  visible: true
  learner_created: true
- name: src/utils/ConsoleReader.java
  visible: true
  text: |
    package client;
    import server.Request;

    import java.util.Scanner;

    public class ConsoleReader {
        private static final Scanner scanner = new Scanner(System.in);


        public static Request getRequest(){
            int n = 0;
            String answer = scanner.nextLine();
            if (!answer.equals("exit")) n = Integer.parseInt(answer);

            switch (n){
                case 1 : return Request.GET;
                case 2 :return Request.PUT;
                case 3: return Request.DELETE;
                case 0: return Request.EXIT;
                default: return null;
            }
        }

        public static String readString(){
            return scanner.nextLine();
        }
    }
  learner_created: true
- name: src/utils/ConsoleWriter.java
  visible: true
  text: |
    package server;



    public class ConsoleWriter {


        public static void printMessage(String message){
            System.out.println(message);
        }


        public static void prompt(){
            System.out.println("Enter action (1 - get a file, 2 - create a file, 3 - delete a file):");

        }
        public static  void  chooseFile(){
            System.out.println("Enter filename:");
        }

        public static void enterContent(){
            System.out.println("Enter file content: ");
        }


        public static void sentRequest(){
            System.out.println("The request was sent.");
        }

        public static void notFound(){
            System.out.println("The response says that the file was not found!");
        }

        public static void printContent(String content){
            System.out.println("The content of the file is: " + content);
        }

        public static void creationSuccess(){
            System.out.println("The response says that file was created!");
        }

        public static void creationFail(){
            System.out.println("The response says that creating the file was forbidden!");
        }

        public static void deletionSuccess(){
            System.out.println("The response says that the file was successfully deleted!");
        }


    }
  learner_created: true
- name: src/utils/ResponseType.java
  visible: true
  text: |
    package server;

    import java.util.Arrays;

    public enum Response {
        SUCCESS("200"),
        NOT_EXIST("404"),
        FORBIDDEN("403");

        private String value;

        Response(final String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public static Response ofValue(String v){
            for (Response x : Response.values()) {
                if (x.getValue().equals(v)) {
                    return x;
                }
            }
            return null;
        }

        @Override
        public String toString() {
            return this.getValue();
        }
    }
  learner_created: true
- name: src/utils/Response.java
  visible: true
  learner_created: true
- name: src/utils/FileHelper.java
  visible: true
  learner_created: true
- name: src/client/data/ScreenShot45.png
  visible: true
  learner_created: true
- name: src/server/FileStorage.java
  visible: true
  learner_created: true
- name: src/server/data/screenshot
  visible: true
  learner_created: true
- name: src/client/data/new_screenshot
  visible: true
  learner_created: true
- name: src/server/data/test.png
  visible: true
  learner_created: true
- name: src/server/data/file0
  visible: true
  learner_created: true
- name: src/server/data/map
  visible: true
  learner_created: true
- name: src/client/data/hello
  visible: true
  learner_created: true
- name: src/server/data/test
  visible: true
  learner_created: true
- name: src/client/data/download
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5428#comment
status: Unchecked
record: -1
